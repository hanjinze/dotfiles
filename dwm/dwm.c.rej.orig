***************
*** 55,66 ****
  #define TAGMASK                 ((1 << LENGTH(tags)) - 1)
  #define TEXTW(X)                (textnw(X, strlen(X)) + dc.font.height)
  
  /* enums */
  enum { CurNormal, CurResize, CurMove, CurLast };        /* cursor */
  enum { ColBorder, ColFG, ColBG, ColLast };              /* color */
- enum { NetSupported, NetWMName, NetWMState,
-        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
-        NetWMWindowTypeDialog, NetLast };     /* EWMH atoms */
  enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; /* default atoms */
  enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
         ClkClientWin, ClkRootWin, ClkLast };             /* clicks */
--- 55,84 ----
  #define TAGMASK                 ((1 << LENGTH(tags)) - 1)
  #define TEXTW(X)                (textnw(X, strlen(X)) + dc.font.height)
  
+ #define SYSTEM_TRAY_REQUEST_DOCK    0
+ #define _NET_SYSTEM_TRAY_ORIENTATION_HORZ 0
+ 
+ /* XEMBED messages */
+ #define XEMBED_EMBEDDED_NOTIFY      0
+ #define XEMBED_WINDOW_ACTIVATE      1
+ #define XEMBED_FOCUS_IN             4
+ #define XEMBED_MODALITY_ON         10
+ 
+ #define XEMBED_MAPPED              (1 << 0)
+ #define XEMBED_WINDOW_ACTIVATE      1
+ #define XEMBED_WINDOW_DEACTIVATE    2
+ 
+ #define VERSION_MAJOR               0
+ #define VERSION_MINOR               0
+ #define XEMBED_EMBEDDED_VERSION (VERSION_MAJOR << 16) | VERSION_MINOR
+ 
  /* enums */
  enum { CurNormal, CurResize, CurMove, CurLast };        /* cursor */
  enum { ColBorder, ColFG, ColBG, ColLast };              /* color */
+ enum { NetSupported, NetSystemTray, NetSystemTrayOP, NetSystemTrayOrientation,
+ 	   NetWMName, NetWMState, NetWMFullscreen, NetActiveWindow, NetWMWindowType,
+ 	   NetWMWindowTypeDialog, NetLast }; /* EWMH atoms */
+ enum { Manager, Xembed, XembedInfo, XLast }; /* Xembed atoms */
  enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; /* default atoms */
  enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
         ClkClientWin, ClkRootWin, ClkLast };             /* clicks */
***************
*** 201,209 ****
  static void focusin(XEvent *e);
  static void focusmon(const Arg *arg);
  static void focusstack(const Arg *arg);
  static unsigned long getcolor(const char *colstr);
  static Bool getrootptr(int *x, int *y);
  static long getstate(Window w);
  static Bool gettextprop(Window w, Atom atom, char *text, unsigned int size);
  static void grabbuttons(Client *c, Bool focused);
  static void grabkeys(void);
--- 225,235 ----
  static void focusin(XEvent *e);
  static void focusmon(const Arg *arg);
  static void focusstack(const Arg *arg);
+ static Atom getatomprop(Client *c, Atom prop);
  static unsigned long getcolor(const char *colstr);
  static Bool getrootptr(int *x, int *y);
  static long getstate(Window w);
+ static unsigned int getsystraywidth();
  static Bool gettextprop(Window w, Atom atom, char *text, unsigned int size);
  static void grabbuttons(Client *c, Bool focused);
  static void grabkeys(void);
***************
*** 222,234 ****
  static void propertynotify(XEvent *e);
  static void quit(const Arg *arg);
  static Monitor *recttomon(int x, int y, int w, int h);
  static void resize(Client *c, int x, int y, int w, int h, Bool interact);
  static void resizeclient(Client *c, int x, int y, int w, int h);
  static void resizemouse(const Arg *arg);
  static void restack(Monitor *m);
  static void run(void);
  static void scan(void);
- static Bool sendevent(Client *c, Atom proto);
  static void sendmon(Client *c, Monitor *m);
  static void setclientstate(Client *c, long state);
  static void setfocus(Client *c);
--- 248,263 ----
  static void propertynotify(XEvent *e);
  static void quit(const Arg *arg);
  static Monitor *recttomon(int x, int y, int w, int h);
+ static void removesystrayicon(Client *i);
  static void resize(Client *c, int x, int y, int w, int h, Bool interact);
+ static void resizebarwin(Monitor *m);
  static void resizeclient(Client *c, int x, int y, int w, int h);
  static void resizemouse(const Arg *arg);
+ static void resizerequest(XEvent *e);
  static void restack(Monitor *m);
  static void run(void);
  static void scan(void);
+ static Bool sendevent(Window w, Atom proto, int m, long d0, long d1, long d2, long d3, long d4);
  static void sendmon(Client *c, Monitor *m);
  static void setclientstate(Client *c, long state);
  static void setfocus(Client *c);
***************
*** 256,273 ****
  static void updatenumlockmask(void);
  static void updatesizehints(Client *c);
  static void updatestatus(void);
  static void updatewindowtype(Client *c);
  static void updatetitle(Client *c);
  static void updatewmhints(Client *c);
  static void view(const Arg *arg);
  static Client *wintoclient(Window w);
  static Monitor *wintomon(Window w);
  static int xerror(Display *dpy, XErrorEvent *ee);
  static int xerrordummy(Display *dpy, XErrorEvent *ee);
  static int xerrorstart(Display *dpy, XErrorEvent *ee);
  static void zoom(const Arg *arg);
  
  /* variables */
  static const char broken[] = "broken";
  static char stext[256];
  static int screen;
--- 285,308 ----
  static void updatenumlockmask(void);
  static void updatesizehints(Client *c);
  static void updatestatus(void);
+ static void updatesystray(void);
+ static void updatesystrayicongeom(Client *i, int w, int h);
+ static void updatesystrayiconstate(Client *i, XPropertyEvent *ev);
  static void updatewindowtype(Client *c);
  static void updatetitle(Client *c);
  static void updatewmhints(Client *c);
  static void view(const Arg *arg);
  static Client *wintoclient(Window w);
  static Monitor *wintomon(Window w);
+ static Client *wintosystrayicon(Window w);
  static int xerror(Display *dpy, XErrorEvent *ee);
  static int xerrordummy(Display *dpy, XErrorEvent *ee);
  static int xerrorstart(Display *dpy, XErrorEvent *ee);
  static void zoom(const Arg *arg);
  
  /* variables */
+ static Systray *systray = NULL;
+ static unsigned long systrayorientation = _NET_SYSTEM_TRAY_ORIENTATION_HORZ;
  static const char broken[] = "broken";
  static char stext[256];
  static int screen;
***************
*** 289,297 ****
  	[MapRequest] = maprequest,
  	[MotionNotify] = motionnotify,
  	[PropertyNotify] = propertynotify,
  	[UnmapNotify] = unmapnotify
  };
- static Atom wmatom[WMLast], netatom[NetLast];
  static Bool running = True;
  static Cursor cursor[CurLast];
  static Display *dpy;
--- 324,333 ----
  	[MapRequest] = maprequest,
  	[MotionNotify] = motionnotify,
  	[PropertyNotify] = propertynotify,
+ 	[ResizeRequest] = resizerequest,
  	[UnmapNotify] = unmapnotify
  };
+ static Atom wmatom[WMLast], netatom[NetLast], xatom[XLast];
  static Bool running = True;
  static Cursor cursor[CurLast];
  static Display *dpy;
***************
*** 512,517 ****
  	XFreeCursor(dpy, cursor[CurMove]);
  	while(mons)
  		cleanupmon(mons);
  	XSync(dpy, False);
  	XSetInputFocus(dpy, PointerRoot, RevertToPointerRoot, CurrentTime);
  }
--- 548,558 ----
  	XFreeCursor(dpy, cursor[CurMove]);
  	while(mons)
  		cleanupmon(mons);
+ 	if(showsystray) {
+ 		XUnmapWindow(dpy, systray->win);
+ 		XDestroyWindow(dpy, systray->win);
+ 		free(systray);
+ 	}
  	XSync(dpy, False);
  	XSetInputFocus(dpy, PointerRoot, RevertToPointerRoot, CurrentTime);
  }
***************
*** 545,553 ****
  
  void
  clientmessage(XEvent *e) {
  	XClientMessageEvent *cme = &e->xclient;
  	Client *c = wintoclient(cme->window);
  
  	if(!c)
  		return;
  	if(cme->message_type == netatom[NetWMState]) {
--- 587,635 ----
  
  void
  clientmessage(XEvent *e) {
+ 	XWindowAttributes wa;
+ 	XSetWindowAttributes swa;
  	XClientMessageEvent *cme = &e->xclient;
  	Client *c = wintoclient(cme->window);
  
+ 	if(showsystray && cme->window == systray->win && cme->message_type == netatom[NetSystemTrayOP]) {
+ 		/* add systray icons */
+ 		if(cme->data.l[1] == SYSTEM_TRAY_REQUEST_DOCK) {
+ 			if(!(c = (Client *)calloc(1, sizeof(Client))))
+ 				die("fatal: could not malloc() %u bytes\n", sizeof(Client));
+ 			c->win = cme->data.l[2];
+ 			c->mon = selmon;
+ 			c->next = systray->icons;
+ 			systray->icons = c;
+ 			XGetWindowAttributes(dpy, c->win, &wa);
+ 			c->x = c->oldx = c->y = c->oldy = 0;
+ 			c->w = c->oldw = wa.width;
+ 			c->h = c->oldh = wa.height;
+ 			c->oldbw = wa.border_width;
+ 			c->bw = 0;
+ 			c->isfloating = True;
+ 			/* reuse tags field as mapped status */
+ 			c->tags = 1;
+ 			updatesizehints(c);
+ 			updatesystrayicongeom(c, wa.width, wa.height);
+ 			XAddToSaveSet(dpy, c->win);
+ 			XSelectInput(dpy, c->win, StructureNotifyMask | PropertyChangeMask | ResizeRedirectMask);
+ 			XReparentWindow(dpy, c->win, systray->win, 0, 0);
+ 			/* use parents background pixmap */
+ 			swa.background_pixmap = ParentRelative;
+ 			swa.background_pixel  = dc.norm[ColBG];
+ 			XChangeWindowAttributes(dpy, c->win, CWBackPixmap|CWBackPixel, &swa);
+ 			sendevent(c->win, netatom[Xembed], StructureNotifyMask, CurrentTime, XEMBED_EMBEDDED_NOTIFY, 0 , systray->win, XEMBED_EMBEDDED_VERSION);
+ 			/* FIXME not sure if I have to send these events, too */
+ 			sendevent(c->win, netatom[Xembed], StructureNotifyMask, CurrentTime, XEMBED_FOCUS_IN, 0 , systray->win, XEMBED_EMBEDDED_VERSION);
+ 			sendevent(c->win, netatom[Xembed], StructureNotifyMask, CurrentTime, XEMBED_WINDOW_ACTIVATE, 0 , systray->win, XEMBED_EMBEDDED_VERSION);
+ 			sendevent(c->win, netatom[Xembed], StructureNotifyMask, CurrentTime, XEMBED_MODALITY_ON, 0 , systray->win, XEMBED_EMBEDDED_VERSION);
+ 			resizebarwin(selmon);
+ 			updatesystray();
+ 			setclientstate(c, NormalState);
+ 		}
+ 		return;
+ 	}
  	if(!c)
  		return;
  	if(cme->message_type == netatom[NetWMState]) {
***************
*** 598,604 ****
  			dc.drawable = XCreatePixmap(dpy, root, sw, bh, DefaultDepth(dpy, screen));
  			updatebars();
  			for(m = mons; m; m = m->next)
- 				XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, m->ww, bh);
  			focus(NULL);
  			arrange(NULL);
  		}
--- 678,684 ----
  			dc.drawable = XCreatePixmap(dpy, root, sw, bh, DefaultDepth(dpy, screen));
  			updatebars();
  			for(m = mons; m; m = m->next)
+ 				resizebarwin(m);
  			focus(NULL);
  			arrange(NULL);
  		}
***************
*** 682,687 ****
  
  	if((c = wintoclient(ev->window)))
  		unmanage(c, True);
  }
  
  void
--- 762,772 ----
  
  	if((c = wintoclient(ev->window)))
  		unmanage(c, True);
+ 	else if((c = wintosystrayicon(ev->window))) {
+ 		removesystrayicon(c);
+ 		resizebarwin(selmon);
+ 		updatesystray();
+ 	}
  }
  
  void
***************
*** 737,742 ****
  	unsigned long *col;
  	Client *c;
  
  	for(c = m->clients; c; c = c->next) {
  		occ |= c->tags;
  		if(c->isurgent)
--- 822,828 ----
  	unsigned long *col;
  	Client *c;
  
+ 	resizebarwin(m);
  	for(c = m->clients; c; c = c->next) {
  		occ |= c->tags;
  		if(c->isurgent)
***************
*** 758,763 ****
  	if(m == selmon) { /* status is only drawn on selected monitor */
  		dc.w = TEXTW(stext);
  		dc.x = m->ww - dc.w;
  		if(dc.x < x) {
  			dc.x = x;
  			dc.w = m->ww - x;
--- 844,852 ----
  	if(m == selmon) { /* status is only drawn on selected monitor */
  		dc.w = TEXTW(stext);
  		dc.x = m->ww - dc.w;
+ 		if(showsystray && m == selmon) {
+ 			dc.x -= getsystraywidth();
+ 		}
  		if(dc.x < x) {
  			dc.x = x;
  			dc.w = m->ww - x;
***************
*** 786,791 ****
  
  	for(m = mons; m; m = m->next)
  		drawbar(m);
  }
  
  void
--- 875,881 ----
  
  	for(m = mons; m; m = m->next)
  		drawbar(m);
+ 	updatesystray();
  }
  
  void
***************
*** 932,941 ****
  	unsigned long dl;
  	unsigned char *p = NULL;
  	Atom da, atom = None;
  
- 	if(XGetWindowProperty(dpy, c->win, prop, 0L, sizeof atom, False, XA_ATOM,
  	                      &da, &di, &dl, &dl, &p) == Success && p) {
  		atom = *(Atom *)p;
  		XFree(p);
  	}
  	return atom;
--- 1022,1038 ----
  	unsigned long dl;
  	unsigned char *p = NULL;
  	Atom da, atom = None;
+ 	/* FIXME getatomprop should return the number of items and a pointer to
+ 	 * the stored data instead of this workaround */
+ 	Atom req = XA_ATOM;
+ 	if(prop == xatom[XembedInfo])
+ 		req = xatom[XembedInfo];
  
+ 	if(XGetWindowProperty(dpy, c->win, prop, 0L, sizeof atom, False, req,
  	                      &da, &di, &dl, &dl, &p) == Success && p) {
  		atom = *(Atom *)p;
+ 		if(da == xatom[XembedInfo] && dl == 2)
+ 			atom = ((Atom *)p)[1];
  		XFree(p);
  	}
  	return atom;
***************
*** 1213,1219 ****
  killclient(const Arg *arg) {
  	if(!selmon->sel)
  		return;
- 	if(!sendevent(selmon->sel, wmatom[WMDelete])) {
  		XGrabServer(dpy);
  		XSetErrorHandler(xerrordummy);
  		XSetCloseDownMode(dpy, DestroyAll);
--- 1319,1325 ----
  killclient(const Arg *arg) {
  	if(!selmon->sel)
  		return;
+ 	if(!sendevent(selmon->sel->win, wmatom[WMDelete], NoEventMask, wmatom[WMDelete], CurrentTime, 0 , 0, 0)) {
  		XGrabServer(dpy);
  		XSetErrorHandler(xerrordummy);
  		XSetCloseDownMode(dpy, DestroyAll);
***************
*** 1297,1302 ****
  maprequest(XEvent *e) {
  	static XWindowAttributes wa;
  	XMapRequestEvent *ev = &e->xmaprequest;
  
  	if(!XGetWindowAttributes(dpy, ev->window, &wa))
  		return;
--- 1403,1414 ----
  maprequest(XEvent *e) {
  	static XWindowAttributes wa;
  	XMapRequestEvent *ev = &e->xmaprequest;
+ 	Client *i;
+ 	if((i = wintosystrayicon(ev->window))) {
+ 		sendevent(i->win, netatom[Xembed], StructureNotifyMask, CurrentTime, XEMBED_WINDOW_ACTIVATE, 0, systray->win, XEMBED_EMBEDDED_VERSION);
+ 		resizebarwin(selmon);
+ 		updatesystray();
+ 	}
  
  	if(!XGetWindowAttributes(dpy, ev->window, &wa))
  		return;
***************
*** 1410,1415 ****
  	Window trans;
  	XPropertyEvent *ev = &e->xproperty;
  
  	if((ev->window == root) && (ev->atom == XA_WM_NAME))
  		updatestatus();
  	else if(ev->state == PropertyDelete)
--- 1522,1537 ----
  	Window trans;
  	XPropertyEvent *ev = &e->xproperty;
  
+ 	if((c = wintosystrayicon(ev->window))) {
+ 		if(ev->atom == XA_WM_NORMAL_HINTS) {
+ 			updatesizehints(c);
+ 			updatesystrayicongeom(c, c->w, c->h);
+ 		}
+ 		else
+ 			updatesystrayiconstate(c, ev);
+ 		resizebarwin(selmon);
+ 		updatesystray();
+ 	}
  	if((ev->window == root) && (ev->atom == XA_WM_NAME))
  		updatestatus();
  	else if(ev->state == PropertyDelete)
***************
*** 1459,1470 ****
  }
  
  void
  resize(Client *c, int x, int y, int w, int h, Bool interact) {
  	if(applysizehints(c, &x, &y, &w, &h, interact))
  		resizeclient(c, x, y, w, h);
  }
  
  void
  resizeclient(Client *c, int x, int y, int w, int h) {
  	XWindowChanges wc;
  
--- 1581,1613 ----
  }
  
  void
+ removesystrayicon(Client *i) {
+ 	Client **ii;
+ 
+ 	if(!showsystray || !i)
+ 		return;
+ 	for(ii = &systray->icons; *ii && *ii != i; ii = &(*ii)->next);
+ 	if(ii)
+ 		*ii = i->next;
+ 	free(i);
+ }
+ 
+ 
+ void
  resize(Client *c, int x, int y, int w, int h, Bool interact) {
  	if(applysizehints(c, &x, &y, &w, &h, interact))
  		resizeclient(c, x, y, w, h);
  }
  
  void
+ resizebarwin(Monitor *m) {
+ 	unsigned int w = m->ww;
+ 	if(showsystray && m == selmon)
+ 		w -= getsystraywidth();
+ 	XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, w, bh);
+ }
+ 
+ void
  resizeclient(Client *c, int x, int y, int w, int h) {
  	XWindowChanges wc;
  
***************
*** 1613,1637 ****
  }
  
  Bool
- sendevent(Client *c, Atom proto) {
  	int n;
- 	Atom *protocols;
  	Bool exists = False;
  	XEvent ev;
  
- 	if(XGetWMProtocols(dpy, c->win, &protocols, &n)) {
- 		while(!exists && n--)
- 			exists = protocols[n] == proto;
- 		XFree(protocols);
  	}
  	if(exists) {
  		ev.type = ClientMessage;
- 		ev.xclient.window = c->win;
- 		ev.xclient.message_type = wmatom[WMProtocols];
  		ev.xclient.format = 32;
- 		ev.xclient.data.l[0] = proto;
- 		ev.xclient.data.l[1] = CurrentTime;
- 		XSendEvent(dpy, c->win, False, NoEventMask, &ev);
  	}
  	return exists;
  }
--- 1768,1802 ----
  }
  
  Bool
+ sendevent(Window w, Atom proto, int mask, long d0, long d1, long d2, long d3, long d4) {
  	int n;
+ 	Atom *protocols, mt;
  	Bool exists = False;
  	XEvent ev;
  
+ 	if(proto == wmatom[WMTakeFocus] || proto == wmatom[WMDelete]) {
+ 		mt = wmatom[WMProtocols];
+ 		if(XGetWMProtocols(dpy, w, &protocols, &n)) {
+ 			while(!exists && n--)
+ 				exists = protocols[n] == proto;
+ 			XFree(protocols);
+ 		}
+ 	}
+ 	else {
+ 		exists = True;
+ 		mt = proto;
  	}
  	if(exists) {
  		ev.type = ClientMessage;
+ 		ev.xclient.window = w;
+ 		ev.xclient.message_type = mt;
  		ev.xclient.format = 32;
+ 		ev.xclient.data.l[0] = d0;
+ 		ev.xclient.data.l[1] = d1;
+ 		ev.xclient.data.l[2] = d2;
+ 		ev.xclient.data.l[3] = d3;
+ 		ev.xclient.data.l[4] = d4;
+ 		XSendEvent(dpy, w, False, mask, &ev);
  	}
  	return exists;
  }
***************
*** 1640,1646 ****
  setfocus(Client *c) {
  	if(!c->neverfocus)
  		XSetInputFocus(dpy, c->win, RevertToPointerRoot, CurrentTime);
- 	sendevent(c, wmatom[WMTakeFocus]);
  }
  
  void
--- 1805,1811 ----
  setfocus(Client *c) {
  	if(!c->neverfocus)
  		XSetInputFocus(dpy, c->win, RevertToPointerRoot, CurrentTime);
+ 	sendevent(c->win, wmatom[WMTakeFocus], NoEventMask, wmatom[WMTakeFocus], CurrentTime, 0, 0, 0);
  }
  
  void
***************
*** 1720,1730 ****
  	wmatom[WMTakeFocus] = XInternAtom(dpy, "WM_TAKE_FOCUS", False);
  	netatom[NetActiveWindow] = XInternAtom(dpy, "_NET_ACTIVE_WINDOW", False);
  	netatom[NetSupported] = XInternAtom(dpy, "_NET_SUPPORTED", False);
  	netatom[NetWMName] = XInternAtom(dpy, "_NET_WM_NAME", False);
  	netatom[NetWMState] = XInternAtom(dpy, "_NET_WM_STATE", False);
  	netatom[NetWMFullscreen] = XInternAtom(dpy, "_NET_WM_STATE_FULLSCREEN", False);
  	netatom[NetWMWindowType] = XInternAtom(dpy, "_NET_WM_WINDOW_TYPE", False);
  	netatom[NetWMWindowTypeDialog] = XInternAtom(dpy, "_NET_WM_WINDOW_TYPE_DIALOG", False);
  	/* init cursors */
  	cursor[CurNormal] = XCreateFontCursor(dpy, XC_left_ptr);
  	cursor[CurResize] = XCreateFontCursor(dpy, XC_sizing);
--- 1885,1901 ----
  	wmatom[WMTakeFocus] = XInternAtom(dpy, "WM_TAKE_FOCUS", False);
  	netatom[NetActiveWindow] = XInternAtom(dpy, "_NET_ACTIVE_WINDOW", False);
  	netatom[NetSupported] = XInternAtom(dpy, "_NET_SUPPORTED", False);
+ 	netatom[NetSystemTray] = XInternAtom(dpy, "_NET_SYSTEM_TRAY_S0", False);
+ 	netatom[NetSystemTrayOP] = XInternAtom(dpy, "_NET_SYSTEM_TRAY_OPCODE", False);
+ 	netatom[NetSystemTrayOrientation] = XInternAtom(dpy, "_NET_SYSTEM_TRAY_ORIENTATION", False);
  	netatom[NetWMName] = XInternAtom(dpy, "_NET_WM_NAME", False);
  	netatom[NetWMState] = XInternAtom(dpy, "_NET_WM_STATE", False);
  	netatom[NetWMFullscreen] = XInternAtom(dpy, "_NET_WM_STATE_FULLSCREEN", False);
  	netatom[NetWMWindowType] = XInternAtom(dpy, "_NET_WM_WINDOW_TYPE", False);
  	netatom[NetWMWindowTypeDialog] = XInternAtom(dpy, "_NET_WM_WINDOW_TYPE_DIALOG", False);
+ 	xatom[Manager] = XInternAtom(dpy, "MANAGER", False);
+ 	xatom[Xembed] = XInternAtom(dpy, "_XEMBED", False);
+ 	xatom[XembedInfo] = XInternAtom(dpy, "_XEMBED_INFO", False);
  	/* init cursors */
  	cursor[CurNormal] = XCreateFontCursor(dpy, XC_left_ptr);
  	cursor[CurResize] = XCreateFontCursor(dpy, XC_sizing);
***************
*** 1741,1746 ****
  	XSetLineAttributes(dpy, dc.gc, 1, LineSolid, CapButt, JoinMiter);
  	if(!dc.font.set)
  		XSetFont(dpy, dc.gc, dc.font.xfont->fid);
  	/* init bars */
  	updatebars();
  	updatestatus();
--- 1912,1919 ----
  	XSetLineAttributes(dpy, dc.gc, 1, LineSolid, CapButt, JoinMiter);
  	if(!dc.font.set)
  		XSetFont(dpy, dc.gc, dc.font.xfont->fid);
+ 	/* init system tray */
+ 	updatesystray();
  	/* init bars */
  	updatebars();
  	updatestatus();
***************
*** 1849,1855 ****
  togglebar(const Arg *arg) {
  	selmon->showbar = !selmon->showbar;
  	updatebarpos(selmon);
- 	XMoveResizeWindow(dpy, selmon->barwin, selmon->wx, selmon->by, selmon->ww, bh);
  	arrange(selmon);
  }
  
--- 2022,2039 ----
  togglebar(const Arg *arg) {
  	selmon->showbar = !selmon->showbar;
  	updatebarpos(selmon);
+ 	resizebarwin(selmon);
+ 	if(showsystray) {
+ 		XWindowChanges wc;
+ 		if(!selmon->showbar)
+ 			wc.y = -bh;
+ 		else if(selmon->showbar) {
+ 			wc.y = 0;
+ 			if(!selmon->topbar)
+ 				wc.y = selmon->mh - bh;
+ 		}
+ 		XConfigureWindow(dpy, systray->win, CWY, &wc);
+ 	}
  	arrange(selmon);
  }
  
***************
*** 1934,1951 ****
  		else
  			unmanage(c, False);
  	}
  }
  
  void
  updatebars(void) {
  	Monitor *m;
  	XSetWindowAttributes wa = {
  		.override_redirect = True,
  		.background_pixmap = ParentRelative,
  		.event_mask = ButtonPressMask|ExposureMask
  	};
  	for(m = mons; m; m = m->next) {
- 		m->barwin = XCreateWindow(dpy, root, m->wx, m->by, m->ww, bh, 0, DefaultDepth(dpy, screen),
  		                          CopyFromParent, DefaultVisual(dpy, screen),
  		                          CWOverrideRedirect|CWBackPixmap|CWEventMask, &wa);
  		XDefineCursor(dpy, m->barwin, cursor[CurNormal]);
--- 2118,2145 ----
  		else
  			unmanage(c, False);
  	}
+ 	else if((c = wintosystrayicon(ev->window))) {
+ 		removesystrayicon(c);
+ 		resizebarwin(selmon);
+ 		updatesystray();
+ 	}
  }
  
  void
  updatebars(void) {
+ 	unsigned int w;
  	Monitor *m;
+ 
  	XSetWindowAttributes wa = {
  		.override_redirect = True,
  		.background_pixmap = ParentRelative,
  		.event_mask = ButtonPressMask|ExposureMask
  	};
  	for(m = mons; m; m = m->next) {
+ 		w = m->ww;
+ 		if(showsystray && m == selmon)
+ 			w -= getsystraywidth();
+ 		m->barwin = XCreateWindow(dpy, root, m->wx, m->by, w, bh, 0, DefaultDepth(dpy, screen),
  		                          CopyFromParent, DefaultVisual(dpy, screen),
  		                          CWOverrideRedirect|CWBackPixmap|CWEventMask, &wa);
  		XDefineCursor(dpy, m->barwin, cursor[CurNormal]);
